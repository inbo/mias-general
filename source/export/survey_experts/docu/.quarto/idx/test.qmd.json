{"title":"test","markdown":{"yaml":{"title":"test","author":"Janne Adolf","format":{"html":{"toc":true,"theme":"lux","number-sections":true}},"execute":{"echo":false,"cache":false}},"headingText":"full table base","containsRefs":false,"markdown":"\n\n\n```{r load-data-and-functions}\n#| cache: false\n\nlist.files(\"../../../functions\", full.names = TRUE) |>\n  lapply(source) |>\n  invisible()\n\noptions(knitr.kable.NA = '')\noptions(knitr.table.format = \"html\") \n\nresponse_data_path <- \"../../../../data/survey_experts/\" \nload(paste0(response_data_path, \"tables/\", \"table_base_filtered.rda\"))\nload(paste0(response_data_path, \"tables/\", \"table_base_illustration.rda\"))\nload(paste0(response_data_path, \"tables/\", \"table_filtered_illustration.rda\"))\n\n```\n\n```{r define-function-add-symbols}\n\nadd_symbols <- function(\n    .table_base_filtered,\n    .symbols_base_list = symbols_base_list,\n    .symbols_filtered_list = symbols_filtered_list\n){\n  .table_base_filtered |>\n    #\n    # add symbols for scope boolean motivation\n    dplyr::mutate(\n      scope_boolean_symbol = NA_character_,\n      .after = scope_boolean_motivation\n    ) |>\n    dplyr::rowwise() |>\n    dplyr::mutate(\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"invasion stadium\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$stadium, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"area is known\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$area, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"not managed\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$management_exists, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"evaluate management\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$management_eval, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"measure abundance\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$method, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      )\n    )|>\n    #\n    # add sumbols for scope prior motivation\n    dplyr::mutate(\n      scope_prior_symbol = NA_character_,\n      .after = scope_prior_motivation\n    ) |>\n    dplyr::rowwise() |>\n    dplyr::mutate(\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"opportunistic observations\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$observation, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      ),\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"area is not known\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$area, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      ),\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"global priority score\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$globalscore, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      )\n    )|>\n    #\n    # final formatting symbols\n    dplyr::mutate(\n      scope_boolean_symbol = gsub(\"NA, \", \"\", scope_boolean_symbol),\n      scope_boolean_symbol = dplyr::case_when(\n        !is.na(scope_boolean_symbol) ~ paste0(\"$\", scope_boolean_symbol, \"$\"),\n        TRUE ~ NA_character_\n      ),\n      scope_prior_symbol = gsub(\"NA, \", \"\", scope_prior_symbol),\n      scope_prior_symbol = dplyr::case_when(\n        !is.na(scope_prior_symbol) ~ paste0(\"$\", scope_prior_symbol, \"$\"),\n        TRUE ~ NA_character_\n      )\n    ) |>\n    dplyr::ungroup()\n}\n\n```\n\n```{r add-symbols}\n\nsymbols_base_list <- list(\n  stadium = \"\\\\circ\",\n  area = \"\\\\#\",\n  management_exists = \"\\\\dagger\",\n  management_eval = \"\\\\ddagger\",\n  method = \"\\\\bot\"\n)\nsymbols_filtered_list <- list(\n  observation = \"\\\\triangle\",\n  area = \"\\\\times\",\n  globalscore = \"\\\\ast\"\n)\ntable_base_filtered_upd <- add_symbols(table_base_filtered)\ntable_base_illu_list_upd <- lapply(table_base_illu_list, add_symbols)\ntable_filtered_illu_list_upd <- lapply(table_filtered_illu_list, add_symbols)\n\n```\n\n```{r add-scope-verbose}\n\ntable_base_upd <- table_base_filtered_upd |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 ~ method_all,\n      scope_boolean == 0 ~ scope_boolean_symbol\n    ),\n    .after = scope_boolean\n  )\n#\n# illustration table base\ntable_base_illu_list_upd <- lapply(\n  table_base_illu_list_upd,\n  \\(x)\n  dplyr::mutate(.data = x,\n                scope_verbose = dplyr::case_when(\n                  scope_boolean == 1 ~ \"\",\n                  scope_boolean == 0 ~ scope_boolean_symbol\n                ),\n                .after = scope_boolean\n  )\n)\n#\n# full table filtered\ntable_filtered_upd <- table_base_filtered_upd |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 & grepl(\"highprior\", scope_prior) ~ \n        kableExtra::cell_spec(x = method_all, bold = TRUE),\n      scope_boolean == 1 & grepl(\"lowprior\", scope_prior) ~ \n        paste(scope_prior_symbol, kableExtra::cell_spec(x = method_all, color = \"lightgrey\")),\n      scope_boolean == 0 ~ \n        kableExtra::cell_spec(x = scope_boolean_symbol, color = \"lightgrey\")\n    ),\n    .after = scope_prior\n  ) |>\n  dplyr::select(!tidyselect::starts_with(\"scope_boolean\"))\n#\n# illustration table filtered\ntable_filtered_illu_list_upd <- lapply(\n  table_filtered_illu_list_upd,\n  \\(x) dplyr::mutate(\n    .data = x,\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 & grepl(\"highprior\", scope_prior) ~ \n        kableExtra::cell_spec(x = method_all, bold = TRUE),\n      scope_boolean == 1 & grepl(\"lowprior\", scope_prior) ~ \n        scope_prior_symbol,\n      scope_boolean == 0 ~ \n        kableExtra::cell_spec(x = scope_boolean_symbol, color = \"lightgrey\")\n    ),\n    .after = scope_prior\n  )\n)\n\n```\n\n```{r highlight-symbols-illustration}\n\ntmp_fun <- function(table, symbol){\n      dplyr::mutate(\n      .data = table,\n      scope_verbose = dplyr::case_when(\n        grepl(symbol, scope_verbose) ~ kableExtra::cell_spec(\n          x = scope_verbose,\n          color = \"coral\",\n          bold = TRUE\n        ),\n        TRUE ~ scope_verbose\n      )\n    )\n  \n}\ntable_base_illu_list_upd <- mapply(\n  tmp_fun,\n  table_base_illu_list_upd,\n  symbols_base_list |>\n    purrr::modify_at(\"management_exists\",\n                     \\(x) paste0(\"\\\\\", symbols_base_list$management_exists)) |>\n    purrr::modify_at(\"management_eval\",\n                     \\(x) paste0(\"\\\\\", symbols_base_list$management_eval)) |>\n    purrr::modify_at(\"method\",\n                     \\(x) paste0(\"\\\\\", symbols_base_list$method)),\n  SIMPLIFY = FALSE\n)\n#\ntable_filtered_illu_list_upd <- mapply(\n  tmp_fun,\n  table_filtered_illu_list_upd,\n  symbols_filtered_list|>\n    purrr::modify_at(\"observation\",\n                     \\(x) paste0(\"\\\\\", symbols_filtered_list$observation)) |>\n    purrr::modify_at(\"area\",\n                     \\(x) paste0(\"\\\\\", symbols_filtered_list$area)) |>\n    purrr::modify_at(\"globalscore\",\n                     \\(x) paste0(\"\\\\\", symbols_filtered_list$globalscore)),\n  SIMPLIFY = FALSE\n)\n\n```\n\n```{r define-table-footnotes}\n\nfootnote_base <- table_base_upd |>\n  dplyr::filter(!grepl(\",\", scope_boolean_motivation)) |>\n  dplyr::select(c(scope_verbose, scope_motivation = scope_boolean_motivation)) |>\n  tidyr::drop_na() |>\n  dplyr::distinct(scope_motivation, .keep_all = TRUE) |>\n  dplyr::arrange(\n    match(\n      scope_verbose,\n      symbols_base_list |> unlist() |> unname() |> paste0(\"$\", x = _, \"$\")\n    )\n  )\nfootnote_filtered <- table_filtered_upd |> \n  dplyr::filter(!grepl(\",\", scope_prior_motivation)) |>\n  dplyr::select(c(scope_verbose = scope_prior_symbol, scope_motivation = scope_prior_motivation)) |>\n  tidyr::drop_na() |>\n  dplyr::distinct(scope_motivation, .keep_all = TRUE) |>\n  dplyr::arrange(\n    match(\n      scope_verbose,\n      symbols_filtered_list |> unlist() |> unname() |> paste0(\"$\", x = _, \"$\")\n    )\n  )\n```\n\n```{r factorize-data-for-display}\n\nargs_factorize <- list(\n  varnames = c(\"scope_type\", \"stadium\"),\n  varlevels = list(c(\"detection\",\n                     \"inventory\",\n                     \"distribution\",\n                     \"abundance\",\n                     \"distribution_management\",\n                     \"abundance_management\"),\n                   c(\"afwezig\",\n                     \"sporadisch aanwezig\",\n                     \"beperkt gevestigd\",\n                     \"wijdverspreid\")\n  )\n)\n#\ntable_base_upd <- do.call(\"factorize\", append(args_factorize, list(dataframe =   table_base_upd)))\ntable_filtered_upd <- do.call(\"factorize\", append(args_factorize, list(dataframe =   table_filtered_upd)))\n#\ntable_base_illu_list_upd <- lapply(\n  table_base_illu_list_upd,\n  \\(x) do.call(\"factorize\", append(args_factorize, list(dataframe = x)))\n)\ntable_filtered_illu_list_upd <- lapply(\n  table_filtered_illu_list_upd,\n  \\(x) do.call(\"factorize\", append(args_factorize, list(dataframe = x)))\n)\n\n```\n\n```{r define-function-make-table-display}\n\nmake_table_display <- function(\n    data_table,\n    cols_id = c(\n      \"species\",\n      \"vern_name_nld\",\n      \"stadium\"\n    ),\n    cols_addon = c(\n      \"m_score\"\n    ),\n    footnote_data = footnote_base\n){\n  data_table_wide <- data_table |>\n    tidyr::pivot_wider(\n      id_cols = !tidyselect::starts_with(\"scope_\"),\n      names_from = scope_type,\n      values_from = scope_verbose,\n      names_prefix = \"scope_\"\n    ) |>\n    dplyr::select(\n      tidyselect::all_of(cols_id) |\n        tidyselect::all_of(c(\n          \"scope_detection\",\n          \"scope_inventory\",\n          \"scope_distribution\",\n          \"scope_abundance\",\n          \"scope_distribution_management\",\n          \"scope_abundance_management\"\n        )) |\n        tidyselect::all_of(cols_addon)\n    )\n  #\n  knitr::kable(\n    x = data_table_wide,\n    format = \"html\",\n    escape = FALSE,\n    col.names = colnames(data_table_wide) |>\n      gsub(pattern = \"scope_\", replacement = \"\", x = _) |>\n      gsub(pattern = \"_\", replacement = \" \", x = _) |>\n      stringr::str_wrap(width = nchar(\"distribution\")),\n    table.attr = 'data-quarto-disable-processing=\"true\"' # if quarto HERE\n  ) |>\n    kableExtra::column_spec(\n      column = #grep(\"scope\", colnames(data_table_wide)),\n        c(seq_along(cols_id), seq_along(cols_addon) + length(cols_id) + 6),\n      background = \"grey97\"\n    ) |>\n    kableExtra::kable_styling(\n      bootstrap_options = c(\"condensed\", \"hover\"),\n      full_width = FALSE,\n      position = \"left\",\n      font_size = 13\n    ) |>\n    kableExtra::collapse_rows(\n      columns = seq_along(cols_id),\n      valign = \"top\"\n    ) |>\n    kableExtra::add_header_above(\n      header = c(\n        \" \" = length(cols_id),\n        \"scope\" = grepl(\"scope\", colnames(data_table_wide)) |> sum(),\n        \" \" = length(cols_addon)\n      ),\n      extra_css = \"border-bottom: 2px solid\"\n    ) |>\n    kableExtra::row_spec(\n      row = 0 ,\n      # align headers top \n      extra_css = 'vertical-align: top !important; padding: 5px;'\n    ) |>\n    kableExtra::row_spec(\n      row = 1:nrow(data_table_wide),\n      # row height\n      extra_css = 'padding: 5px;'\n    ) |>\n    kableExtra::footnote(\n      symbol = footnote_data$scope_motivation,\n      symbol_manual = footnote_data$scope_verbose,\n      escape = FALSE\n    ) \n}\n\n```\n\n\n## Approach\n\n### Steps\n\n### Illustration base table\n\n\n```{r make-base-table-illustration}\n#| cache: false\n\ntable_base_illu_list_display <- mapply(\n  \\(table, index) {\n    table |> \n      dplyr::arrange(stadium) |>\n      make_table_display(\n        data_table = _,\n        cols_id = c(\"species\", \"stadium\"),\n        cols_addon = NULL,\n        footnote_data = footnote_base[1:index,] |>\n          # color last row of footnote data\n          dplyr::mutate(\n            dplyr::across(\n              tidyselect::starts_with(\"scope\"),\n              \\(y) dplyr::case_when(\n                dplyr::row_number() == dplyr::n() ~ kableExtra::cell_spec(x = y, color = \"coral\"),\n                TRUE ~ y\n              )\n            )\n          )\n      )\n  },\n  table_base_illu_list_upd,\n  table_base_illu_list_upd |> seq_along(),\n  SIMPLIFY = FALSE\n)\n\n```\n\n#### Step 1-1\n\n```{r show-base-table-illustration-1}\n#| results: asis\n#| classes: .center-table\n\n# https://github.com/quarto-dev/quarto-cli/issues/1710\ntable_base_illu_list_display$stadium |> unclass() |> cat()\n\n```\n\n#### Step 1-2\n\n```{r show-base-table-illustration-2}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_display$area |> unclass() |> cat()\n\n```\n\n#### Step 1-3\n\n```{r show-base-table-illustration-3}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_display$management_exists |> unclass() |> cat()\n\n```\n\n#### Step 1-4\n\n```{r show-base-table-illustration-4}\n#| results: asis\n#| classes: .center-table\n\n\ntable_base_illu_list_display$management_eval |> unclass() |> cat()\n\n```\n\n#### Step 1-5\n\n```{r show-base-table-illustration-5}\n#| results: asis\n#| classes: .center-table\n\n\ntable_base_illu_list_display$method |> unclass() |> cat()\n\n```\n\n\n```{r show-base-table-illustration-6}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_final <- table_base_illu_list_upd |> \n  dplyr::last() |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 ~ method_all,\n      TRUE ~ scope_verbose\n    ),\n    # don't highlight symbol\n    scope_verbose = gsub(\"coral\", \"black\", scope_verbose)\n  ) |>\n  dplyr::arrange(stadium) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"stadium\"),\n    cols_addon = NULL,\n    footnote_data = footnote_base\n  ) |> \n  unclass() |> cat()\n\n```\n\n\n\n### Illustration filtered table\n\n\n```{r make-filtered-table-illustration}\n#| cache: false\n\ntable_filtered_illu_list_display <- mapply(\n  \\(table, index) {\n    table |>\n      dplyr::arrange(stadium) |>\n      make_table_display(\n        data_table = _,\n        cols_id = c(\"species\", \"stadium\"),\n        cols_addon = NULL,\n        footnote_data = footnote_filtered[1:index,] |>\n          # color last row\n          dplyr::mutate(\n            dplyr::across(\n              tidyselect::starts_with(\"scope\"),\n              \\(y) dplyr::case_when(\n                dplyr::row_number() == dplyr::n() ~ kableExtra::cell_spec(x = y, color = \"coral\"),\n                TRUE ~ y\n              )\n            )\n          )\n      )\n  },\n  table_filtered_illu_list_upd,\n  table_filtered_illu_list_upd |> seq_along(),\n  SIMPLIFY = FALSE\n)\n\n```\n\n#### Step 2-1\n\n```{r show-filtered-table-illustration-1}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$observation |> unclass() |> cat()\n\n```\n\n#### Step 2-2\n\n```{r show-filtered-table-illustration-2}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$area |> unclass() |> cat()\n\n```\n\n#### Step 2-3\n\n```{r show-filtered-table-illustration-3}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$globalscore |> unclass() |> cat()\n\n```\n\n## Base tables\n\n```{r sort-base-table}\n\ntable_base_upd <- table_base_upd |>\n  dplyr::arrange(\n    scope_boolean |> dplyr::desc(), \n    scope_type, \n    stadium, \n    m_score |> dplyr::desc()\n  ) \n\n``` \n\n\n### Plants\n\n```{r make-base-table-display-plants}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_base_upd |>\n  dplyr::filter(grepl(\"plant\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    footnote_data = footnote_base\n  ) |> unclass() |> cat()\n\n```\n\n### Animals\n\n```{r make-base-table-display-animals}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_base_upd |>\n  dplyr::filter(grepl(\"dier\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    footnote_data = footnote_base\n  ) |> unclass() |> cat()\n\n```\n\n\n## Filtered tables\n\n\n```{r sort-filtered-table}\n\ntable_filtered_upd <- table_filtered_upd |>\n  dplyr::arrange(\n    scope_prior,\n    scope_type,\n    stadium, \n    m_score |> dplyr::desc()\n  ) \n\n``` \n\n\n### Plants\n\n```{r make-filtered-table-display-plants}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_filtered_upd |>\n  dplyr::filter(grepl(\"plant\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n### Animals\n\n```{r make-filtered-table-display-animals}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_filtered_upd |>\n  dplyr::filter(grepl(\"dier\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n","srcMarkdownNoYaml":"\n\n\n```{r load-data-and-functions}\n#| cache: false\n\nlist.files(\"../../../functions\", full.names = TRUE) |>\n  lapply(source) |>\n  invisible()\n\noptions(knitr.kable.NA = '')\noptions(knitr.table.format = \"html\") \n\nresponse_data_path <- \"../../../../data/survey_experts/\" \nload(paste0(response_data_path, \"tables/\", \"table_base_filtered.rda\"))\nload(paste0(response_data_path, \"tables/\", \"table_base_illustration.rda\"))\nload(paste0(response_data_path, \"tables/\", \"table_filtered_illustration.rda\"))\n\n```\n\n```{r define-function-add-symbols}\n\nadd_symbols <- function(\n    .table_base_filtered,\n    .symbols_base_list = symbols_base_list,\n    .symbols_filtered_list = symbols_filtered_list\n){\n  .table_base_filtered |>\n    #\n    # add symbols for scope boolean motivation\n    dplyr::mutate(\n      scope_boolean_symbol = NA_character_,\n      .after = scope_boolean_motivation\n    ) |>\n    dplyr::rowwise() |>\n    dplyr::mutate(\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"invasion stadium\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$stadium, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"area is known\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$area, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"not managed\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$management_exists, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"evaluate management\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$management_eval, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"measure abundance\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$method, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      )\n    )|>\n    #\n    # add sumbols for scope prior motivation\n    dplyr::mutate(\n      scope_prior_symbol = NA_character_,\n      .after = scope_prior_motivation\n    ) |>\n    dplyr::rowwise() |>\n    dplyr::mutate(\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"opportunistic observations\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$observation, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      ),\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"area is not known\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$area, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      ),\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"global priority score\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$globalscore, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      )\n    )|>\n    #\n    # final formatting symbols\n    dplyr::mutate(\n      scope_boolean_symbol = gsub(\"NA, \", \"\", scope_boolean_symbol),\n      scope_boolean_symbol = dplyr::case_when(\n        !is.na(scope_boolean_symbol) ~ paste0(\"$\", scope_boolean_symbol, \"$\"),\n        TRUE ~ NA_character_\n      ),\n      scope_prior_symbol = gsub(\"NA, \", \"\", scope_prior_symbol),\n      scope_prior_symbol = dplyr::case_when(\n        !is.na(scope_prior_symbol) ~ paste0(\"$\", scope_prior_symbol, \"$\"),\n        TRUE ~ NA_character_\n      )\n    ) |>\n    dplyr::ungroup()\n}\n\n```\n\n```{r add-symbols}\n\nsymbols_base_list <- list(\n  stadium = \"\\\\circ\",\n  area = \"\\\\#\",\n  management_exists = \"\\\\dagger\",\n  management_eval = \"\\\\ddagger\",\n  method = \"\\\\bot\"\n)\nsymbols_filtered_list <- list(\n  observation = \"\\\\triangle\",\n  area = \"\\\\times\",\n  globalscore = \"\\\\ast\"\n)\ntable_base_filtered_upd <- add_symbols(table_base_filtered)\ntable_base_illu_list_upd <- lapply(table_base_illu_list, add_symbols)\ntable_filtered_illu_list_upd <- lapply(table_filtered_illu_list, add_symbols)\n\n```\n\n```{r add-scope-verbose}\n\n# full table base\ntable_base_upd <- table_base_filtered_upd |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 ~ method_all,\n      scope_boolean == 0 ~ scope_boolean_symbol\n    ),\n    .after = scope_boolean\n  )\n#\n# illustration table base\ntable_base_illu_list_upd <- lapply(\n  table_base_illu_list_upd,\n  \\(x)\n  dplyr::mutate(.data = x,\n                scope_verbose = dplyr::case_when(\n                  scope_boolean == 1 ~ \"\",\n                  scope_boolean == 0 ~ scope_boolean_symbol\n                ),\n                .after = scope_boolean\n  )\n)\n#\n# full table filtered\ntable_filtered_upd <- table_base_filtered_upd |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 & grepl(\"highprior\", scope_prior) ~ \n        kableExtra::cell_spec(x = method_all, bold = TRUE),\n      scope_boolean == 1 & grepl(\"lowprior\", scope_prior) ~ \n        paste(scope_prior_symbol, kableExtra::cell_spec(x = method_all, color = \"lightgrey\")),\n      scope_boolean == 0 ~ \n        kableExtra::cell_spec(x = scope_boolean_symbol, color = \"lightgrey\")\n    ),\n    .after = scope_prior\n  ) |>\n  dplyr::select(!tidyselect::starts_with(\"scope_boolean\"))\n#\n# illustration table filtered\ntable_filtered_illu_list_upd <- lapply(\n  table_filtered_illu_list_upd,\n  \\(x) dplyr::mutate(\n    .data = x,\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 & grepl(\"highprior\", scope_prior) ~ \n        kableExtra::cell_spec(x = method_all, bold = TRUE),\n      scope_boolean == 1 & grepl(\"lowprior\", scope_prior) ~ \n        scope_prior_symbol,\n      scope_boolean == 0 ~ \n        kableExtra::cell_spec(x = scope_boolean_symbol, color = \"lightgrey\")\n    ),\n    .after = scope_prior\n  )\n)\n\n```\n\n```{r highlight-symbols-illustration}\n\ntmp_fun <- function(table, symbol){\n      dplyr::mutate(\n      .data = table,\n      scope_verbose = dplyr::case_when(\n        grepl(symbol, scope_verbose) ~ kableExtra::cell_spec(\n          x = scope_verbose,\n          color = \"coral\",\n          bold = TRUE\n        ),\n        TRUE ~ scope_verbose\n      )\n    )\n  \n}\ntable_base_illu_list_upd <- mapply(\n  tmp_fun,\n  table_base_illu_list_upd,\n  symbols_base_list |>\n    purrr::modify_at(\"management_exists\",\n                     \\(x) paste0(\"\\\\\", symbols_base_list$management_exists)) |>\n    purrr::modify_at(\"management_eval\",\n                     \\(x) paste0(\"\\\\\", symbols_base_list$management_eval)) |>\n    purrr::modify_at(\"method\",\n                     \\(x) paste0(\"\\\\\", symbols_base_list$method)),\n  SIMPLIFY = FALSE\n)\n#\ntable_filtered_illu_list_upd <- mapply(\n  tmp_fun,\n  table_filtered_illu_list_upd,\n  symbols_filtered_list|>\n    purrr::modify_at(\"observation\",\n                     \\(x) paste0(\"\\\\\", symbols_filtered_list$observation)) |>\n    purrr::modify_at(\"area\",\n                     \\(x) paste0(\"\\\\\", symbols_filtered_list$area)) |>\n    purrr::modify_at(\"globalscore\",\n                     \\(x) paste0(\"\\\\\", symbols_filtered_list$globalscore)),\n  SIMPLIFY = FALSE\n)\n\n```\n\n```{r define-table-footnotes}\n\nfootnote_base <- table_base_upd |>\n  dplyr::filter(!grepl(\",\", scope_boolean_motivation)) |>\n  dplyr::select(c(scope_verbose, scope_motivation = scope_boolean_motivation)) |>\n  tidyr::drop_na() |>\n  dplyr::distinct(scope_motivation, .keep_all = TRUE) |>\n  dplyr::arrange(\n    match(\n      scope_verbose,\n      symbols_base_list |> unlist() |> unname() |> paste0(\"$\", x = _, \"$\")\n    )\n  )\nfootnote_filtered <- table_filtered_upd |> \n  dplyr::filter(!grepl(\",\", scope_prior_motivation)) |>\n  dplyr::select(c(scope_verbose = scope_prior_symbol, scope_motivation = scope_prior_motivation)) |>\n  tidyr::drop_na() |>\n  dplyr::distinct(scope_motivation, .keep_all = TRUE) |>\n  dplyr::arrange(\n    match(\n      scope_verbose,\n      symbols_filtered_list |> unlist() |> unname() |> paste0(\"$\", x = _, \"$\")\n    )\n  )\n```\n\n```{r factorize-data-for-display}\n\nargs_factorize <- list(\n  varnames = c(\"scope_type\", \"stadium\"),\n  varlevels = list(c(\"detection\",\n                     \"inventory\",\n                     \"distribution\",\n                     \"abundance\",\n                     \"distribution_management\",\n                     \"abundance_management\"),\n                   c(\"afwezig\",\n                     \"sporadisch aanwezig\",\n                     \"beperkt gevestigd\",\n                     \"wijdverspreid\")\n  )\n)\n#\ntable_base_upd <- do.call(\"factorize\", append(args_factorize, list(dataframe =   table_base_upd)))\ntable_filtered_upd <- do.call(\"factorize\", append(args_factorize, list(dataframe =   table_filtered_upd)))\n#\ntable_base_illu_list_upd <- lapply(\n  table_base_illu_list_upd,\n  \\(x) do.call(\"factorize\", append(args_factorize, list(dataframe = x)))\n)\ntable_filtered_illu_list_upd <- lapply(\n  table_filtered_illu_list_upd,\n  \\(x) do.call(\"factorize\", append(args_factorize, list(dataframe = x)))\n)\n\n```\n\n```{r define-function-make-table-display}\n\nmake_table_display <- function(\n    data_table,\n    cols_id = c(\n      \"species\",\n      \"vern_name_nld\",\n      \"stadium\"\n    ),\n    cols_addon = c(\n      \"m_score\"\n    ),\n    footnote_data = footnote_base\n){\n  data_table_wide <- data_table |>\n    tidyr::pivot_wider(\n      id_cols = !tidyselect::starts_with(\"scope_\"),\n      names_from = scope_type,\n      values_from = scope_verbose,\n      names_prefix = \"scope_\"\n    ) |>\n    dplyr::select(\n      tidyselect::all_of(cols_id) |\n        tidyselect::all_of(c(\n          \"scope_detection\",\n          \"scope_inventory\",\n          \"scope_distribution\",\n          \"scope_abundance\",\n          \"scope_distribution_management\",\n          \"scope_abundance_management\"\n        )) |\n        tidyselect::all_of(cols_addon)\n    )\n  #\n  knitr::kable(\n    x = data_table_wide,\n    format = \"html\",\n    escape = FALSE,\n    col.names = colnames(data_table_wide) |>\n      gsub(pattern = \"scope_\", replacement = \"\", x = _) |>\n      gsub(pattern = \"_\", replacement = \" \", x = _) |>\n      stringr::str_wrap(width = nchar(\"distribution\")),\n    table.attr = 'data-quarto-disable-processing=\"true\"' # if quarto HERE\n  ) |>\n    kableExtra::column_spec(\n      column = #grep(\"scope\", colnames(data_table_wide)),\n        c(seq_along(cols_id), seq_along(cols_addon) + length(cols_id) + 6),\n      background = \"grey97\"\n    ) |>\n    kableExtra::kable_styling(\n      bootstrap_options = c(\"condensed\", \"hover\"),\n      full_width = FALSE,\n      position = \"left\",\n      font_size = 13\n    ) |>\n    kableExtra::collapse_rows(\n      columns = seq_along(cols_id),\n      valign = \"top\"\n    ) |>\n    kableExtra::add_header_above(\n      header = c(\n        \" \" = length(cols_id),\n        \"scope\" = grepl(\"scope\", colnames(data_table_wide)) |> sum(),\n        \" \" = length(cols_addon)\n      ),\n      extra_css = \"border-bottom: 2px solid\"\n    ) |>\n    kableExtra::row_spec(\n      row = 0 ,\n      # align headers top \n      extra_css = 'vertical-align: top !important; padding: 5px;'\n    ) |>\n    kableExtra::row_spec(\n      row = 1:nrow(data_table_wide),\n      # row height\n      extra_css = 'padding: 5px;'\n    ) |>\n    kableExtra::footnote(\n      symbol = footnote_data$scope_motivation,\n      symbol_manual = footnote_data$scope_verbose,\n      escape = FALSE\n    ) \n}\n\n```\n\n\n## Approach\n\n### Steps\n\n### Illustration base table\n\n\n```{r make-base-table-illustration}\n#| cache: false\n\ntable_base_illu_list_display <- mapply(\n  \\(table, index) {\n    table |> \n      dplyr::arrange(stadium) |>\n      make_table_display(\n        data_table = _,\n        cols_id = c(\"species\", \"stadium\"),\n        cols_addon = NULL,\n        footnote_data = footnote_base[1:index,] |>\n          # color last row of footnote data\n          dplyr::mutate(\n            dplyr::across(\n              tidyselect::starts_with(\"scope\"),\n              \\(y) dplyr::case_when(\n                dplyr::row_number() == dplyr::n() ~ kableExtra::cell_spec(x = y, color = \"coral\"),\n                TRUE ~ y\n              )\n            )\n          )\n      )\n  },\n  table_base_illu_list_upd,\n  table_base_illu_list_upd |> seq_along(),\n  SIMPLIFY = FALSE\n)\n\n```\n\n#### Step 1-1\n\n```{r show-base-table-illustration-1}\n#| results: asis\n#| classes: .center-table\n\n# https://github.com/quarto-dev/quarto-cli/issues/1710\ntable_base_illu_list_display$stadium |> unclass() |> cat()\n\n```\n\n#### Step 1-2\n\n```{r show-base-table-illustration-2}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_display$area |> unclass() |> cat()\n\n```\n\n#### Step 1-3\n\n```{r show-base-table-illustration-3}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_display$management_exists |> unclass() |> cat()\n\n```\n\n#### Step 1-4\n\n```{r show-base-table-illustration-4}\n#| results: asis\n#| classes: .center-table\n\n\ntable_base_illu_list_display$management_eval |> unclass() |> cat()\n\n```\n\n#### Step 1-5\n\n```{r show-base-table-illustration-5}\n#| results: asis\n#| classes: .center-table\n\n\ntable_base_illu_list_display$method |> unclass() |> cat()\n\n```\n\n\n```{r show-base-table-illustration-6}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_final <- table_base_illu_list_upd |> \n  dplyr::last() |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 ~ method_all,\n      TRUE ~ scope_verbose\n    ),\n    # don't highlight symbol\n    scope_verbose = gsub(\"coral\", \"black\", scope_verbose)\n  ) |>\n  dplyr::arrange(stadium) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"stadium\"),\n    cols_addon = NULL,\n    footnote_data = footnote_base\n  ) |> \n  unclass() |> cat()\n\n```\n\n\n\n### Illustration filtered table\n\n\n```{r make-filtered-table-illustration}\n#| cache: false\n\ntable_filtered_illu_list_display <- mapply(\n  \\(table, index) {\n    table |>\n      dplyr::arrange(stadium) |>\n      make_table_display(\n        data_table = _,\n        cols_id = c(\"species\", \"stadium\"),\n        cols_addon = NULL,\n        footnote_data = footnote_filtered[1:index,] |>\n          # color last row\n          dplyr::mutate(\n            dplyr::across(\n              tidyselect::starts_with(\"scope\"),\n              \\(y) dplyr::case_when(\n                dplyr::row_number() == dplyr::n() ~ kableExtra::cell_spec(x = y, color = \"coral\"),\n                TRUE ~ y\n              )\n            )\n          )\n      )\n  },\n  table_filtered_illu_list_upd,\n  table_filtered_illu_list_upd |> seq_along(),\n  SIMPLIFY = FALSE\n)\n\n```\n\n#### Step 2-1\n\n```{r show-filtered-table-illustration-1}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$observation |> unclass() |> cat()\n\n```\n\n#### Step 2-2\n\n```{r show-filtered-table-illustration-2}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$area |> unclass() |> cat()\n\n```\n\n#### Step 2-3\n\n```{r show-filtered-table-illustration-3}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$globalscore |> unclass() |> cat()\n\n```\n\n## Base tables\n\n```{r sort-base-table}\n\ntable_base_upd <- table_base_upd |>\n  dplyr::arrange(\n    scope_boolean |> dplyr::desc(), \n    scope_type, \n    stadium, \n    m_score |> dplyr::desc()\n  ) \n\n``` \n\n\n### Plants\n\n```{r make-base-table-display-plants}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_base_upd |>\n  dplyr::filter(grepl(\"plant\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    footnote_data = footnote_base\n  ) |> unclass() |> cat()\n\n```\n\n### Animals\n\n```{r make-base-table-display-animals}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_base_upd |>\n  dplyr::filter(grepl(\"dier\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    footnote_data = footnote_base\n  ) |> unclass() |> cat()\n\n```\n\n\n## Filtered tables\n\n\n```{r sort-filtered-table}\n\ntable_filtered_upd <- table_filtered_upd |>\n  dplyr::arrange(\n    scope_prior,\n    scope_type,\n    stadium, \n    m_score |> dplyr::desc()\n  ) \n\n``` \n\n\n### Plants\n\n```{r make-filtered-table-display-plants}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_filtered_upd |>\n  dplyr::filter(grepl(\"plant\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n### Animals\n\n```{r make-filtered-table-display-animals}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_filtered_upd |>\n  dplyr::filter(grepl(\"dier\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":true,"output-file":"test.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","title":"test","author":"Janne Adolf","theme":"lux"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}