{"title":"Plan of action","markdown":{"yaml":{"title":"Plan of action","author":"Janne Adolf, Diederik Strubbe, Tim Adriaens, Thierry Onkelinx","format":{"html":{"toc":true,"toc-location":"left","toc-depth":4,"toc-expand":true,"theme":"yeti","number-sections":true,"number-depth":3}},"execute":{"eval":true,"echo":false,"cache":false}},"headingText":"full table base","containsRefs":false,"markdown":"\n\n\n```{r load-data-and-functions}\n#| cache: false\n\nlist.files(\"../../../functions\", full.names = TRUE) |>\n  lapply(source) |>\n  invisible()\n\noptions(knitr.kable.NA = '')\noptions(knitr.table.format = \"html\") \n\nresponse_data_path <- \"../../../../data/survey_experts/\" \nload(paste0(response_data_path, \"tables/\", \"table_base_filtered.rda\"))\nload(paste0(response_data_path, \"tables/\", \"table_base_illustration.rda\"))\nload(paste0(response_data_path, \"tables/\", \"table_filtered_illustration.rda\"))\n\n```\n\n```{r define-colors}\n\ncolor_hl = \"#FA8775\"\ncolor_meth_a = \"#0000FF\"\ncolor_meth_b = \"#FFB14E\" # \"#CD34B5\"\n\n```\n\n```{r define-function-add-symbols}\n\nadd_symbols <- function(\n    .table_base_filtered,\n    .symbols_base_list = symbols_base_list,\n    .symbols_filtered_list = symbols_filtered_list\n){\n  .table_base_filtered |>\n    #\n    # add symbols for scope boolean motivation\n    dplyr::mutate(\n      scope_boolean_symbol = NA_character_,\n      .after = scope_boolean_motivation\n    ) |>\n    dplyr::rowwise() |>\n    dplyr::mutate(\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"invasion stadium\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$stadium, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"area is known\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$area, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"not managed\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$management_exists, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"evaluate management\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$management_eval, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"measure abundance\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$method, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      )\n    )|>\n    #\n    # add sumbols for scope prior motivation\n    dplyr::mutate(\n      scope_prior_symbol = NA_character_,\n      .after = scope_prior_motivation\n    ) |>\n    dplyr::rowwise() |>\n    dplyr::mutate(\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"opportunistic observations\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$observation, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      ),\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"area is not known\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$area, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      ),\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"global priority score\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$globalscore, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      )\n    )|>\n    #\n    # final formatting symbols\n    dplyr::mutate(\n      scope_boolean_symbol = gsub(\"NA, \", \"\", scope_boolean_symbol),\n      scope_prior_symbol = gsub(\"NA, \", \"\", scope_prior_symbol)#,\n    ) |>\n    dplyr::ungroup()\n}\n\n```\n\n```{r add-symbols}\n\nsymbols_base_list <- list(\n  stadium = \"$\\\\circ$\", \n  area = \"$\\\\#$\", \n  management_exists = \"$\\\\dagger$\", \n  management_eval = \"$\\\\ddagger$\",\n  method = \"$\\\\bot$\"\n)\nsymbols_filtered_list <- list(\n  observation = \"$\\\\triangle$\",\n  area = \"$\\\\times$\",\n  globalscore = \"$\\\\ast$\"\n)\ntable_base_filtered_upd <- add_symbols(table_base_filtered)\ntable_base_illu_list_upd <- lapply(table_base_illu_list, add_symbols)\ntable_filtered_illu_list_upd <- lapply(table_filtered_illu_list, add_symbols)\n\n```\n\n```{r add-scope-verbose}\n\ntable_base_upd <- table_base_filtered_upd |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 ~ method_all,\n      scope_boolean == 0 ~ scope_boolean_symbol\n    ),\n    .after = scope_boolean\n  )\n#\n# illustration table base\ntable_base_illu_list_upd <- lapply(\n  table_base_illu_list_upd,\n  \\(x)\n  dplyr::mutate(.data = x,\n                scope_verbose = dplyr::case_when(\n                  scope_boolean == 1 ~ \"\",\n                  scope_boolean == 0 ~ scope_boolean_symbol\n                ),\n                .after = scope_boolean\n  )\n)\n#\n# full table filtered\ntable_filtered_upd <- table_base_filtered_upd |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 & grepl(\"highprior\", scope_prior) ~ \n        kableExtra::cell_spec(x = method_all, bold = TRUE),\n      scope_boolean == 1 & grepl(\"lowprior\", scope_prior) ~ \n        paste(scope_prior_symbol, kableExtra::cell_spec(x = method_all, color = \"lightgrey\")),\n      scope_boolean == 0 ~ \n        kableExtra::cell_spec(x = scope_boolean_symbol, color = \"lightgrey\")\n    ),\n    .after = scope_prior\n  ) |>\n  dplyr::select(!tidyselect::starts_with(\"scope_boolean\"))\n#\n# illustration table filtered\ntable_filtered_illu_list_upd <- lapply(\n  table_filtered_illu_list_upd,\n  \\(x) dplyr::mutate(\n    .data = x,\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 & grepl(\"highprior\", scope_prior) ~ \n        kableExtra::cell_spec(x = method_all, bold = TRUE),\n      scope_boolean == 1 & grepl(\"lowprior\", scope_prior) ~ \n        # setup so that later highlighting does not break\n        paste0(kableExtra::cell_spec(x = method_all, color = \"lightgrey\"), \", \", scope_prior_symbol ),\n        #scope_prior_symbol,\n      scope_boolean == 0 ~ \n        kableExtra::cell_spec(x = scope_boolean_symbol, color = \"lightgrey\")\n    ),\n    .after = scope_prior\n  )\n)\n\n```\n\n```{r highlight-symbols-illustration}\n\ntmp_fun <- function(table, symbol){\n  dplyr::mutate(\n    .data = table,\n    scope_verbose = dplyr::case_when(\n      grepl(symbol, scope_verbose) ~ paste0(\n        # remove text after last comma\n        sub(\"([^,]*)$\",\" \", scope_verbose),\n        kableExtra::cell_spec(\n          # remove text before and including last comma\n          x = sub('.*\\\\,', \"\", scope_verbose),\n          color = color_hl,\n          bold = TRUE\n        )\n      ),\n      TRUE ~ scope_verbose\n    )\n  )\n  \n}\ntable_base_illu_list_upd <- mapply(\n  tmp_fun,\n  table_base_illu_list_upd,\n  # prep for grepl\n  symbols_base_list |>\n    lapply(X = _, FUN = \\(x) \n           gsub(pattern = \"\\\\$\", replacement = \"\", x = x) |>\n             gsub(pattern = \"\\\\\\\\d\", replacement = \"\\\\\\\\\\\\\\\\d\", x = _) |>\n             gsub(pattern = \"\\\\\\\\b\", replacement = \"\\\\\\\\\\\\\\\\b\", x = _)\n           ),\n  SIMPLIFY = FALSE\n)\ntable_filtered_illu_list_upd <- mapply(\n  tmp_fun,\n  table_filtered_illu_list_upd,\n  # prep for grepl\n  symbols_filtered_list |>\n    lapply(X = _, FUN = \\(x) \n           gsub(pattern = \"\\\\$\", replacement = \"\", x = x) |>\n             gsub(pattern = \"\\\\\\\\t\", replacement = \"\\\\\\\\\\\\\\\\t\", x = _) |>\n             gsub(pattern = \"\\\\\\\\a\", replacement = \"\\\\\\\\\\\\\\\\a\", x = _)\n           ),\n  SIMPLIFY = FALSE\n)\n\n\n```\n\n```{r define-table-footnotes}\n\nfootnote_base <- table_base_upd |>\n  dplyr::filter(!grepl(\",\", scope_boolean_motivation)) |>\n  dplyr::select(c(scope_verbose, scope_motivation = scope_boolean_motivation)) |>\n  tidyr::drop_na() |>\n  dplyr::distinct(scope_motivation, .keep_all = TRUE) |>\n  dplyr::arrange(\n    match(\n      scope_verbose,\n      symbols_base_list |> unlist() |> unname() \n    )\n  )\nfootnote_filtered <- table_filtered_upd |> \n  dplyr::filter(!grepl(\",\", scope_prior_motivation)) |>\n  dplyr::select(c(scope_verbose = scope_prior_symbol, scope_motivation = scope_prior_motivation)) |>\n  tidyr::drop_na() |>\n  dplyr::distinct(scope_motivation, .keep_all = TRUE) |>\n  dplyr::arrange(\n    match(\n      scope_verbose,\n      symbols_filtered_list |> unlist() |> unname() \n    )\n  )\n```\n\n```{r factorize-data-for-display}\n\nargs_factorize <- list(\n  varnames = c(\"scope_type\", \"stadium\"),\n  varlevels = list(c(\"detection\",\n                     \"inventory\",\n                     \"distribution\",\n                     \"abundance\",\n                     \"distribution_management\",\n                     \"abundance_management\"),\n                   c(\"afwezig\",\n                     \"sporadisch aanwezig\",\n                     \"beperkt gevestigd\",\n                     \"wijdverspreid\"),\n                   c(\n                     \"freshwater\",\n                     \"freshwater, brackishwater\",\n                     \"freshwater, brackishwater, marine\",\n                     \"freshwater, terrestrial\",\n                     \"terrestrial\",\n                     \"terrestrial, brackishwater\",\n                     \"terrestrial, freshwater, brackishwater\",\n                     \"marine\",\n                     \"brackishwater, marine\"\n                   )\n  )\n)\n#\ntable_base_upd <- do.call(\"factorize\", append(args_factorize, list(dataframe =   table_base_upd)))\ntable_filtered_upd <- do.call(\"factorize\", append(args_factorize, list(dataframe =   table_filtered_upd)))\n#\ntable_base_illu_list_upd <- lapply(\n  table_base_illu_list_upd,\n  \\(x) do.call(\"factorize\", append(args_factorize, list(dataframe = x)))\n)\ntable_filtered_illu_list_upd <- lapply(\n  table_filtered_illu_list_upd,\n  \\(x) do.call(\"factorize\", append(args_factorize, list(dataframe = x)))\n)\n\n```\n\n```{r define-function-make-table-display}\n\nmake_table_display <- function(\n    data_table,\n    cols_id = c(\n      \"species\",\n      \"vern_name_nld\",\n      \"stadium\"\n    ),\n    cols_addon = c(\n      \"m_score\"\n    ),\n    footnote_data = footnote_base\n){\n  data_table_wide <- data_table |>\n    tidyr::pivot_wider(\n      id_cols = !tidyselect::starts_with(\"scope_\"),\n      names_from = scope_type,\n      values_from = scope_verbose,\n      names_prefix = \"scope_\"\n    ) |>\n    dplyr::select(\n      tidyselect::all_of(cols_id) |\n        tidyselect::all_of(c(\n          \"scope_detection\",\n          \"scope_inventory\",\n          \"scope_distribution\",\n          \"scope_abundance\",\n          \"scope_distribution_management\",\n          \"scope_abundance_management\"\n        )) |\n        tidyselect::all_of(cols_addon)\n    )\n  #\n  knitr::kable(\n    x = data_table_wide,\n    format = \"html\",\n    escape = FALSE,\n    col.names = colnames(data_table_wide) |>\n      gsub(pattern = \"scope_\", replacement = \"\", x = _) |>\n      gsub(pattern = \"_\", replacement = \" \", x = _) |>\n      stringr::str_wrap(width = nchar(\"abundance\")), #|> \n      #gsub(pattern = \"\\\\n\", replacement = \"\\\\\\\\n\", x = _),\n    table.attr = 'data-quarto-disable-processing=\"true\"' # if quarto HERE\n  ) |>\n    # background of id and addon cols\n    kableExtra::column_spec(\n      column = \n        c(seq_along(cols_id), seq_along(cols_addon) + length(cols_id) + 6),\n      background = \"grey97\"\n    ) |>\n    # borders of scope cols\n    kableExtra::column_spec(\n      column = c(length(cols_id) + 1:6),\n      border_right = \"2px solid #f7f7f7\"\n    ) |>\n    kableExtra::kable_styling(\n      bootstrap_options = c(\"condensed\", \"hover\"), # \"responsive\"\n      full_width = FALSE,\n      position = \"left\",\n      font_size = 11\n    ) |>\n    kableExtra::collapse_rows(\n      columns = seq_along(cols_id),\n      valign = \"top\"\n    ) |>\n    kableExtra::add_header_above(\n      header = c(\n        \" \" = length(cols_id),\n        \"scope\" = grepl(\"scope\", colnames(data_table_wide)) |> sum(),\n        \" \" = length(cols_addon)\n      ),\n      extra_css = \"border-bottom: 1.5px solid\"\n    ) |>\n    kableExtra::row_spec(\n      row = 0 ,\n      # align headers top \n      extra_css = 'vertical-align: top !important; padding: 8px;'\n    ) |>\n    kableExtra::row_spec(\n      row = 1:nrow(data_table_wide),\n      # row height\n      extra_css = 'padding: 4px;'\n    ) |>\n    kableExtra::footnote(\n      symbol = footnote_data$scope_motivation,\n      symbol_manual = footnote_data$scope_verbose,\n      escape = FALSE\n    ) \n}\n\n```\n\n\n## Approach\n\n### Potential surveillance/monitoring schemes for IAS\n\nFollowing the EU IAS regulation, the IAS of (future) union concern can in theory be subjected to surveillance/monitoring schemes of different scopes.\nWe distinguish 6 surveillance/monitoring scopes:\n\n- Detection\n- Inventory\n- (Change in) Distribution\n- (Change in) Abundance\n- (Change in) Distribution after management\n- (Change in) Abundance after management\n\nWe employ the following working definitions:\n\n\n::: {.callout-note icon=\"false\"}\n## Detection\n\n- *Purpose*:\n    - Early identification of new invasive species in Flanders\n    - Maximize chance of detection (through probability of presence and probability of detection)\n    - Enable rapid responses\n- *Methods*:\n    - *high sensitivity* required relative to costs; this can also be high sensitivity accumulated over repeated measurements if costs are very low\n    - *high specificity* not required as false positives less problematic than false negatives; some procedure of confirmation of initial detections needs to be in place though\n    - provide at least presence/absence information\n    - e.g., eDNA, remote sensing methods\n- *Spatial and temporal coverage/resolution*:\n    - focused surveillance area at/around known/potential places of introduction and sites of sporadic occurrence; possibly also in/around conservation area\n    - complemented by broad (scale of Flanders?) \"surveillance\" via opportunistic observations?\n    - near-continuous measurement in space and time; this can but need not be achieved through high spatial/temporal frequency sampling: methods with low costs and/or sampling effort (e.g., remote sensing) can be used with dense sampling schemes; methods that have lower specificity in time and space (e.g., eDNA) could substitute for near-continuous sampling\n\n:::\n\n::: {.callout-note icon=\"false\"}\n## Inventory\nDefinition here.\n:::\n\n::: {.callout-note icon=\"false\"}\n## (Change in) Distribution\nDefinition here.\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## (Change in) Abundance\nDefinition here.\n:::\n\n::: {.callout-note icon=\"false\"}\n## (Change in) Distribution after management\nDefinition here.\n:::\n\n::: {.callout-note icon=\"false\"}\n## (Change in) Abundance after management\nDefinition here.\n:::\n\n\nCombining the IAS of union concern (here species A - N for purposes of illustration) with all surveillance/monitoring scopes results in a table of *potential combinations* of the form:\n\n\n```{r show-empty-table}\n#| results: asis\n#| classes: .center-table\n#| \ntable_base_illu_list_upd$stadium |> \n  dplyr::mutate(\n    scope_verbose = NA_character_\n  )|>\n  dplyr::arrange(species) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\"),\n    cols_addon = NULL,\n    footnote = NULL) |> \n  unclass() |> cat()\n\n\n```\n\n### Limiting the number of species-scheme combinations\n\nOur aim is to fill this table - with a limited number of *relevant and/or feasible* and *high priority* species-surveillance/monitoring scheme combinations.\nHence we want to obtain sparse variants of the above table as a first component of the plan of action. \nThis will then give rise to a concrete suggestion for the steering committee (e.g., ~3 species groups for which we will start designing the respective surveillance/monitoring schemes using the INBO-guidelines). \n\nTo arrive at such a table variant, the *following steps* are proposed.\nWe thereby mainly rely on the information gathered via the expert survey on IAS in Flanders.\nComplementing the expert judgements with additional information will probably be required occasionally.\n\n- **Step 1**: **Indicate cells that will definitively not be covered**, because...\n    - ... a *scope is irrelevant* for a species (e.g., detection is the only relevant scope for absent species, detection in conservation areas is only needed if a species is absent from the conservation area, if a species is not managed then monitoring after management is not needed)\n    - ... there is *no method available* to implement a scope (e.g., if available methods can only measure presence/absence of a species, but not numbers, abundance cannot be monitored)\n- **Step 2**:  **Obtain a ‘base’ table**\n    - Fill the remaining cells with the *reported methods* and *existing surveillance/monitoring schemes*\n- **Step 3**: **Indicate cells that have higher vs. lower priority**\n    - e.g., species that reach a *critical urgency and feasibility* value can be given priority\n- **Step 4**: **Look for synergies based on method-overlap within scopes**\n    - Between *prior* species, as well as between *prior and non-prior* species\n\nIn the following, we detail these steps and provide a schematic illustration of how the initially presented table will change.\n\n\n### Details and demonstration of approach\n\n```{r make-base-table-illustration}\n#| cache: false\n\ntable_base_illu_list_display <- mapply(\n  \\(table, index) {\n    table |> \n      dplyr::arrange(stadium, species) |>\n      make_table_display(\n        data_table = _,\n        cols_id = c(\"species\", \"stadium\"),\n        cols_addon = NULL,\n        footnote_data = footnote_base[1:index,] |>\n          # color last row of footnote data\n          dplyr::mutate(\n            dplyr::across(\n              tidyselect::starts_with(\"scope\"),\n              \\(y) dplyr::case_when(\n                dplyr::row_number() == dplyr::n() ~ kableExtra::cell_spec(x = y, color = color_hl),\n                TRUE ~ y\n              )\n            )\n          )\n      )\n  },\n  table_base_illu_list_upd,\n  table_base_illu_list_upd |> seq_along(),\n  SIMPLIFY = FALSE\n)\n\n```\n\n\n#### Step 1: Indicate cells that will definitively not be covered\n\nIn Step 1, we mark cells that are *definitively not covered*. \nOne reason for a cell not being covered is that the respective *scope is irrelevant* for a species. \nWe determine scope relevance based on ... \n\n- the invasion stadium of a species, \n- whether the surveillance/monitoring area is known, \n- whether the species is managed,\n- which information is necessary to evaluate management.\n\nAnother reason for a cell not being covered is that there are no suitable methods available to implement the scope.\n\nWe explain and illustrate each component of Step 1 in the following.\nFor the exact filtering rules applied to the survey data see [here](https://github.com/inbo/mias-general/blob/b5c6d5bdccdb77f97c0c42874f5524f57d856ebc/source/export/survey_experts/08_make_priority_tables.R#L226-L292).\n\n##### Invasion stadium\n\nFirst and foremost, scope relevance depends on *invasion stadium*.\nDepending on the invasion stadium (in conservation areas) only certain scopes make sense:\n\n- For **absent species**, the (potential) scope is detection (ideally) at / around places of introduction\n- For **sporadically present species** the (potential) scope is detection (ideally) at / around places of introduction and known sites  \n- For **limited established species**, the (potential) scopes are\n    - inventory,\n    - (change in) distribution (after management) at / around places of distribution and/or management,\n    - (change in) abundance (after management) at places of distribution and/or management\n- For **widely established species**, the (potential) scopes are\n    - detection in conservation areas if the species is not yet present/established there and is expected to have an impact,\n    - (change in) distribution (after management) at and around places of distribution and/or management,\n    - (change in) abundance (after management) at places of distribution and/or management;\n    - inventory is not considered as the distribution of widely established species is generally known (see survey results so far)\n\nHaving considered the invasion stadium the table looks like this:\n\n\n```{r show-base-table-illustration-stadium}\n#| results: asis\n#| classes: .center-table\n\n# https://github.com/quarto-dev/quarto-cli/issues/1710\ntable_base_illu_list_display$stadium |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Surveillance/monitoring area being (un-)known\n\nSecond, scope relevance also depends on whether the *surveillance/monitoring area is known* for a species. \nAt this stage, we only consider *limited established species* here. \n\n- If the **distribution area is reported as known**, then the scope inventory is irrelevant.\n- If the **distribution area is unknown**, inventory is relevant, and we also keep the distribution and abundance-related scopes for now and reconsider them later (see step 3)\n\nHaving considered whether the surveillance/monitoring area is known the table looks like this:\n\n```{r show-base-table-illustration-area}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_display$area |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Existence of management\n\nA third factor to determine scope relevance is the *existence of management*.\n\n- If a **species is not managed**, then management-related monitoring is irrelevant.\n\nHaving considered which species are managed the table looks like this:\n\n```{r show-base-table-illustration-managementexists}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_display$management_exists |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Evaluation of management\n\nFourth, scope relevance depends on the *kind of information necessary to evaluate management* (if the species is managed).\n\n- If **presence-absence information is sufficient**, then management-related monitoring using abundance information is irrelevant\n- If **abundance information is required**, then management-related monitoring using distribution information is irrelevant\n\nHaving considered the evaluation of management the table looks like this:\n\n```{r show-base-table-illustration-managementeval}\n#| results: asis\n#| classes: .center-table\n\n\ntable_base_illu_list_display$management_eval |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Suitable methods\n\nWhile a scope might remain relevant for a species after considering the above-discussed components, \na cell might still not being covered because there are no *suitable methods* available to implement the scope.\nAt this stage, we consider a method not suitable, if it *cannot measure the desired outcome*:\n\n- If a method reported in the survey can **only measure presence-absence** but not relative/absolute abundance of a species,\nthe scopes related to abundance become infeasible\n\nHaving considered the suitability of methods the table looks like this:\n\n\n```{r show-base-table-illustration-5}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_display$method |> unclass() |> cat()\n\n```\n\n#### Step 2: Obtain a ‘base’ table\n\nTo obtain a ‘base’ table in Step 2, we can now fill the remaining cells with the *reported surveillance/monitoring methods*.\nIn addition, we can provide *existing surveillance/monitoring schemes* (potentially) meeting the respective surveillance/monitoring scope (not illustrated here).\n\nThe base table looks like this:\n\n```{r show-base-table-illustration-6}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_upd |> \n  dplyr::last() |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 ~ method_all,\n      TRUE ~ scope_verbose\n    ),\n    # don't highlight symbol\n    scope_verbose = gsub(\n      color_hl |> grDevices::col2rgb() |> as.vector() |> append(255) |> \n        paste(x = _, collapse = \", \"), \n      \"black\" |> grDevices::col2rgb() |> as.vector() |> append(255) |> \n        paste(x = _, collapse = \", \"), \n      scope_verbose)\n  ) |>\n  dplyr::arrange(stadium, species) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"stadium\"),\n    cols_addon = NULL,\n    footnote_data = footnote_base\n  ) |> \n  unclass() |> cat()\n\n```\n\n\n#### Step 3: Indicate cells with higher vs. lower priority\n\n\n```{r make-filtered-table-illustration}\n#| cache: false\n\ntable_filtered_illu_list_display <- mapply(\n  \\(table, index) {\n    table |>\n      dplyr::arrange(stadium, species) |>\n      make_table_display(\n        data_table = _,\n        cols_id = c(\"species\", \"stadium\"),\n        cols_addon = NULL,\n        footnote_data = footnote_filtered[1:index,] |>\n          # color last row of footnote\n          dplyr::mutate(\n            dplyr::across(\n              tidyselect::starts_with(\"scope\"),\n              \\(y) dplyr::case_when(\n                dplyr::row_number() == dplyr::n() ~ kableExtra::cell_spec(x = y, color = color_hl),\n                TRUE ~ y\n              )\n            )\n          )\n      )\n  },\n  table_filtered_illu_list_upd,\n  table_filtered_illu_list_upd |> seq_along(),\n  SIMPLIFY = FALSE\n)\n\n```\n\n\nIn Step 3, we further filter the base table (i.e., distinguish cells with high vs. low priority). \nTo filter, we currently propose to use the following criteria:\n\n- whether or not existing surveillance/monitoring schemes or opportunistic/unstructured observations cover the relevant/feasible scopes\n- whether or not the surveillance/monitoring area is known for a species\n- whether the expert-judged global feasibility and urgency reaches a critical value\n\nWe again explain and illustrate each component of Step 3 in the following.\nFor the exact filtering rules applied to the survey data see [here](https://github.com/inbo/mias-general/blob/b5c6d5bdccdb77f97c0c42874f5524f57d856ebc/source/export/survey_experts/08_make_priority_tables.R#L293-L340).\n\n\n\n##### Existing surveillance/monitoring schemes and opportunistic observations\n\nFirst, we check whether species-scope combinations can be considered covered by *existing surveillance/monitoring schemes* or *opportunistic/unstructured observations* (i.e., waarnemingen.be).\n\n- Cells for which **existing surveillance schemes meet the respective scope** are marked as having low priority (not yet implemented)\n- Cells associated with species for which **opportunistic observations are considered representative** are marked as having low priority\n\nHaving considered the representativeness of opportunistic observations the table looks like this:\n\n```{r show-filtered-table-illustration-observation}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$observation |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Surveillance/monitoring area being (un-)known\n\nSecond, we (again) take into account whether the *surveillance/monitoring area is known* for a species. \nIf the area is reported as unknown the following cells are marked as having low priority.\n\n- For **absent species** the detection scope is marked as having low priority if the introduction places are reported as unknown\n- For **sporadically present species** the detection scope is marked as having low priority if the introduction places or the distribution area are reported as unknown\n- For **limited established species**, if the distribution area is reported as unknown, \n    - the distribution- and abundance-related scopes are marked as low priority (conditional on inventory), \n    - while the inventory scope is marked as high priority\n\nHaving considered whether the surveillance/monitoring area is known the table looks like this:\n\n\n```{r show-filtered-table-illustration-area}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$area |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Global priority score\n\nFinally, we consider the survey’s global priority scores reflecting the *expert-judged global feasibility and urgency per species*. \nFor now we calculate these scores as the grand mean across all scored questions per species, which means that each question gets the same weight.\n\n- One (or even multiple) critical value(s) can be defined in an absolute or relative (percentile) manner. \n    - Currently, the median is employed as as a critical value(s) \n- Cells associated with species that *do not reach the critical value* are marked as having low priority\n\nHaving considered the global prirority score the table looks like this:\n\n\n```{r show-filtered-table-illustration-globalscore}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$globalscore |> unclass() |> cat()\n\n```\n\n\n#### Step 4: Look for synergies\n\nFinally we aim to *group species based on synergies*. \nFor now we consider synergies in *designing* different surveillance/monitoring schemes (e.g., researching methods, planning sampling independent of the concrete sampling sites). We do at this stage not consider synergies that might purely arise during the implementation of the surveillance/monitoring scheme (e.g., overlap in concrete sampling sites). \nWe expect the design-synergies to mainly be driven by method overlap between species within scopes. \n\nSynergies can occur... \n\n- ... between prior species resulting in groups with multiple prior species,\n- ... between prior and non-prior species. In this case we...\n    - ... indicate non-prior species that are potential ‘free riders’ under surveillance/monitoring schemes for prior species.\n    - One priority species per group can thereby be sufficient.\n\n\nStarting from the filtered table...\n\n```{r show-filtered-table-illustration-final}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_final <- table_filtered_illu_list_upd |> \n  dplyr::last() |>\n  dplyr::mutate(\n    # don't highlight symbol\n    scope_verbose = gsub(\n      color_hl |> grDevices::col2rgb() |> as.vector() |> append(255) |> \n        paste(x = _, collapse = \", \"), \n      \"black\" |> grDevices::col2rgb() |> as.vector() |> append(255) |> \n        paste(x = _, collapse = \", \"), \n      scope_verbose)\n  ) |>\n  dplyr::arrange(stadium, species) \ntable_filtered_illu_final |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"stadium\"),\n    cols_addon = NULL,\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n\n... we have highlighted method-synergies within the scope distribution.\n\n```{r show-synergies}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_final |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      grepl(\"distribution$\", scope_type) & grepl(\"high\", scope_prior) & grepl(\"methode A\", method_all) ~ \n        kableExtra::cell_spec(x = method_all, color = color_meth_a, bold = TRUE),\n      grepl(\"distribution$\", scope_type) & grepl(\"high\", scope_prior) & grepl(\"methode B\", method_all) ~ \n        kableExtra::cell_spec(x = method_all, color = color_meth_b, bold = TRUE),\n      TRUE ~ scope_verbose\n    )\n  ) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"stadium\"),\n    cols_addon = NULL,\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n\n\n## Base tables\n\n```{r sort-base-table}\n\ntable_base_upd <- table_base_upd |>\n  dplyr::arrange(\n    scope_boolean |> dplyr::desc(), \n    scope_type, \n    prius_milieu,\n    stadium,\n    m_score |> dplyr::desc()\n  ) \n\n``` \n\nThe following base tables for plants and animals are sorted as follows:\n\n- First, rows are sorted by scope type relying on the order: `r table_base_upd$scope_type |> levels()`.\n    - That is, all species for which (at least) detection is relevant/feasible come first, \nfollowed by those for which (at least) inventory is relevant/feasible, \nfollowed by those for which (at least) inventory is relevant/feasible etc., resulting in a stair step (?)/ blocked pattern.\n- Within (i.e., for each value of) scope type, rows are sorted by milieu according to the order: `r table_base_upd$prius_milieu |> levels()`.\n- Within (i.e., for each value of) milieu, rows are sorted by invasion stadium, from \"absent\" to \"widely established\".\n- Within (i.e., for each value of) invasion stadium, rows are sorted by priority score from high to low.\n\n\n### Plants\n\n```{r make-base-table-display-plants}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_base_upd |>\n  dplyr::filter(grepl(\"plant\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"vern_name_nld\", \"prius_milieu\", \"stadium\"),\n    cols_addon = c(\"m_score\"),\n    footnote_data = footnote_base\n  ) |> unclass() |> cat()\n\n```\n\n### Animals\n\n```{r make-base-table-display-animals}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_base_upd |>\n  dplyr::filter(grepl(\"dier\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"vern_name_nld\", \"prius_milieu\", \"stadium\"),\n    cols_addon = c(\"m_score\"),\n    footnote_data = footnote_base\n  ) |> unclass() |> cat()\n\n```\n\n\n## Filtered tables\n\n\n```{r sort-filtered-table}\n\ntable_filtered_upd <- table_filtered_upd |>\n  dplyr::arrange(\n    scope_prior, \n    scope_type, \n    prius_milieu,\n    stadium,\n    m_score |> dplyr::desc()\n  ) \n\n``` \n\nThe following filtered tables for plants and animals are sorted similarly to the base tables:\n\n- First, rows are sorted by scope priority, with high priority scopes on top.\n- Within (i.e., for each value of) scope priority, rows are sorted by scope type relying again on the order: `r table_base_upd$scope_type |> levels()`.\n    - That is, within the high priority scopes, all species for which (at least) detection is relevant/feasible come first, \nfollowed by those for which (at least) inventory is relevant/feasible, \nfollowed by those for which (at least) inventory is relevant/feasible etc..\n- Within (i.e., for each value of) scope type, rows are again sorted by milieu according to the above order: `r table_base_upd$prius_milieu |> levels()`.\n- Within (i.e., for each value of) milieu, rows are again sorted by invasion stadium, from \"absent\" to \"widely established\".\n- Within (i.e., for each value of) invasion stadium, rows are again sorted by priority score from high to low.\n\n\n\n### Plants\n\n```{r make-filtered-table-display-plants}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_filtered_upd |>\n  dplyr::filter(grepl(\"plant\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"vern_name_nld\", \"prius_milieu\", \"stadium\"),\n    cols_addon = c(\"m_score\"),\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n### Animals\n\n```{r make-filtered-table-display-animals}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_filtered_upd |>\n  dplyr::filter(grepl(\"dier\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"vern_name_nld\", \"prius_milieu\", \"stadium\"),\n    cols_addon = c(\"m_score\"),\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n","srcMarkdownNoYaml":"\n\n\n```{r load-data-and-functions}\n#| cache: false\n\nlist.files(\"../../../functions\", full.names = TRUE) |>\n  lapply(source) |>\n  invisible()\n\noptions(knitr.kable.NA = '')\noptions(knitr.table.format = \"html\") \n\nresponse_data_path <- \"../../../../data/survey_experts/\" \nload(paste0(response_data_path, \"tables/\", \"table_base_filtered.rda\"))\nload(paste0(response_data_path, \"tables/\", \"table_base_illustration.rda\"))\nload(paste0(response_data_path, \"tables/\", \"table_filtered_illustration.rda\"))\n\n```\n\n```{r define-colors}\n\ncolor_hl = \"#FA8775\"\ncolor_meth_a = \"#0000FF\"\ncolor_meth_b = \"#FFB14E\" # \"#CD34B5\"\n\n```\n\n```{r define-function-add-symbols}\n\nadd_symbols <- function(\n    .table_base_filtered,\n    .symbols_base_list = symbols_base_list,\n    .symbols_filtered_list = symbols_filtered_list\n){\n  .table_base_filtered |>\n    #\n    # add symbols for scope boolean motivation\n    dplyr::mutate(\n      scope_boolean_symbol = NA_character_,\n      .after = scope_boolean_motivation\n    ) |>\n    dplyr::rowwise() |>\n    dplyr::mutate(\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"invasion stadium\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$stadium, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"area is known\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$area, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"not managed\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$management_exists, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"evaluate management\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$management_eval, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      ),\n      scope_boolean_symbol = dplyr::case_when(\n        grepl(\"measure abundance\", scope_boolean_motivation) ~\n          paste(scope_boolean_symbol, .symbols_base_list$method, sep = \", \"),\n        TRUE ~ scope_boolean_symbol\n      )\n    )|>\n    #\n    # add sumbols for scope prior motivation\n    dplyr::mutate(\n      scope_prior_symbol = NA_character_,\n      .after = scope_prior_motivation\n    ) |>\n    dplyr::rowwise() |>\n    dplyr::mutate(\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"opportunistic observations\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$observation, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      ),\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"area is not known\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$area, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      ),\n      scope_prior_symbol = dplyr::case_when(\n        grepl(\"global priority score\", scope_prior_motivation) ~\n          paste(scope_prior_symbol, .symbols_filtered_list$globalscore, sep = \", \"),\n        TRUE ~ scope_prior_symbol\n      )\n    )|>\n    #\n    # final formatting symbols\n    dplyr::mutate(\n      scope_boolean_symbol = gsub(\"NA, \", \"\", scope_boolean_symbol),\n      scope_prior_symbol = gsub(\"NA, \", \"\", scope_prior_symbol)#,\n    ) |>\n    dplyr::ungroup()\n}\n\n```\n\n```{r add-symbols}\n\nsymbols_base_list <- list(\n  stadium = \"$\\\\circ$\", \n  area = \"$\\\\#$\", \n  management_exists = \"$\\\\dagger$\", \n  management_eval = \"$\\\\ddagger$\",\n  method = \"$\\\\bot$\"\n)\nsymbols_filtered_list <- list(\n  observation = \"$\\\\triangle$\",\n  area = \"$\\\\times$\",\n  globalscore = \"$\\\\ast$\"\n)\ntable_base_filtered_upd <- add_symbols(table_base_filtered)\ntable_base_illu_list_upd <- lapply(table_base_illu_list, add_symbols)\ntable_filtered_illu_list_upd <- lapply(table_filtered_illu_list, add_symbols)\n\n```\n\n```{r add-scope-verbose}\n\n# full table base\ntable_base_upd <- table_base_filtered_upd |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 ~ method_all,\n      scope_boolean == 0 ~ scope_boolean_symbol\n    ),\n    .after = scope_boolean\n  )\n#\n# illustration table base\ntable_base_illu_list_upd <- lapply(\n  table_base_illu_list_upd,\n  \\(x)\n  dplyr::mutate(.data = x,\n                scope_verbose = dplyr::case_when(\n                  scope_boolean == 1 ~ \"\",\n                  scope_boolean == 0 ~ scope_boolean_symbol\n                ),\n                .after = scope_boolean\n  )\n)\n#\n# full table filtered\ntable_filtered_upd <- table_base_filtered_upd |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 & grepl(\"highprior\", scope_prior) ~ \n        kableExtra::cell_spec(x = method_all, bold = TRUE),\n      scope_boolean == 1 & grepl(\"lowprior\", scope_prior) ~ \n        paste(scope_prior_symbol, kableExtra::cell_spec(x = method_all, color = \"lightgrey\")),\n      scope_boolean == 0 ~ \n        kableExtra::cell_spec(x = scope_boolean_symbol, color = \"lightgrey\")\n    ),\n    .after = scope_prior\n  ) |>\n  dplyr::select(!tidyselect::starts_with(\"scope_boolean\"))\n#\n# illustration table filtered\ntable_filtered_illu_list_upd <- lapply(\n  table_filtered_illu_list_upd,\n  \\(x) dplyr::mutate(\n    .data = x,\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 & grepl(\"highprior\", scope_prior) ~ \n        kableExtra::cell_spec(x = method_all, bold = TRUE),\n      scope_boolean == 1 & grepl(\"lowprior\", scope_prior) ~ \n        # setup so that later highlighting does not break\n        paste0(kableExtra::cell_spec(x = method_all, color = \"lightgrey\"), \", \", scope_prior_symbol ),\n        #scope_prior_symbol,\n      scope_boolean == 0 ~ \n        kableExtra::cell_spec(x = scope_boolean_symbol, color = \"lightgrey\")\n    ),\n    .after = scope_prior\n  )\n)\n\n```\n\n```{r highlight-symbols-illustration}\n\ntmp_fun <- function(table, symbol){\n  dplyr::mutate(\n    .data = table,\n    scope_verbose = dplyr::case_when(\n      grepl(symbol, scope_verbose) ~ paste0(\n        # remove text after last comma\n        sub(\"([^,]*)$\",\" \", scope_verbose),\n        kableExtra::cell_spec(\n          # remove text before and including last comma\n          x = sub('.*\\\\,', \"\", scope_verbose),\n          color = color_hl,\n          bold = TRUE\n        )\n      ),\n      TRUE ~ scope_verbose\n    )\n  )\n  \n}\ntable_base_illu_list_upd <- mapply(\n  tmp_fun,\n  table_base_illu_list_upd,\n  # prep for grepl\n  symbols_base_list |>\n    lapply(X = _, FUN = \\(x) \n           gsub(pattern = \"\\\\$\", replacement = \"\", x = x) |>\n             gsub(pattern = \"\\\\\\\\d\", replacement = \"\\\\\\\\\\\\\\\\d\", x = _) |>\n             gsub(pattern = \"\\\\\\\\b\", replacement = \"\\\\\\\\\\\\\\\\b\", x = _)\n           ),\n  SIMPLIFY = FALSE\n)\ntable_filtered_illu_list_upd <- mapply(\n  tmp_fun,\n  table_filtered_illu_list_upd,\n  # prep for grepl\n  symbols_filtered_list |>\n    lapply(X = _, FUN = \\(x) \n           gsub(pattern = \"\\\\$\", replacement = \"\", x = x) |>\n             gsub(pattern = \"\\\\\\\\t\", replacement = \"\\\\\\\\\\\\\\\\t\", x = _) |>\n             gsub(pattern = \"\\\\\\\\a\", replacement = \"\\\\\\\\\\\\\\\\a\", x = _)\n           ),\n  SIMPLIFY = FALSE\n)\n\n\n```\n\n```{r define-table-footnotes}\n\nfootnote_base <- table_base_upd |>\n  dplyr::filter(!grepl(\",\", scope_boolean_motivation)) |>\n  dplyr::select(c(scope_verbose, scope_motivation = scope_boolean_motivation)) |>\n  tidyr::drop_na() |>\n  dplyr::distinct(scope_motivation, .keep_all = TRUE) |>\n  dplyr::arrange(\n    match(\n      scope_verbose,\n      symbols_base_list |> unlist() |> unname() \n    )\n  )\nfootnote_filtered <- table_filtered_upd |> \n  dplyr::filter(!grepl(\",\", scope_prior_motivation)) |>\n  dplyr::select(c(scope_verbose = scope_prior_symbol, scope_motivation = scope_prior_motivation)) |>\n  tidyr::drop_na() |>\n  dplyr::distinct(scope_motivation, .keep_all = TRUE) |>\n  dplyr::arrange(\n    match(\n      scope_verbose,\n      symbols_filtered_list |> unlist() |> unname() \n    )\n  )\n```\n\n```{r factorize-data-for-display}\n\nargs_factorize <- list(\n  varnames = c(\"scope_type\", \"stadium\"),\n  varlevels = list(c(\"detection\",\n                     \"inventory\",\n                     \"distribution\",\n                     \"abundance\",\n                     \"distribution_management\",\n                     \"abundance_management\"),\n                   c(\"afwezig\",\n                     \"sporadisch aanwezig\",\n                     \"beperkt gevestigd\",\n                     \"wijdverspreid\"),\n                   c(\n                     \"freshwater\",\n                     \"freshwater, brackishwater\",\n                     \"freshwater, brackishwater, marine\",\n                     \"freshwater, terrestrial\",\n                     \"terrestrial\",\n                     \"terrestrial, brackishwater\",\n                     \"terrestrial, freshwater, brackishwater\",\n                     \"marine\",\n                     \"brackishwater, marine\"\n                   )\n  )\n)\n#\ntable_base_upd <- do.call(\"factorize\", append(args_factorize, list(dataframe =   table_base_upd)))\ntable_filtered_upd <- do.call(\"factorize\", append(args_factorize, list(dataframe =   table_filtered_upd)))\n#\ntable_base_illu_list_upd <- lapply(\n  table_base_illu_list_upd,\n  \\(x) do.call(\"factorize\", append(args_factorize, list(dataframe = x)))\n)\ntable_filtered_illu_list_upd <- lapply(\n  table_filtered_illu_list_upd,\n  \\(x) do.call(\"factorize\", append(args_factorize, list(dataframe = x)))\n)\n\n```\n\n```{r define-function-make-table-display}\n\nmake_table_display <- function(\n    data_table,\n    cols_id = c(\n      \"species\",\n      \"vern_name_nld\",\n      \"stadium\"\n    ),\n    cols_addon = c(\n      \"m_score\"\n    ),\n    footnote_data = footnote_base\n){\n  data_table_wide <- data_table |>\n    tidyr::pivot_wider(\n      id_cols = !tidyselect::starts_with(\"scope_\"),\n      names_from = scope_type,\n      values_from = scope_verbose,\n      names_prefix = \"scope_\"\n    ) |>\n    dplyr::select(\n      tidyselect::all_of(cols_id) |\n        tidyselect::all_of(c(\n          \"scope_detection\",\n          \"scope_inventory\",\n          \"scope_distribution\",\n          \"scope_abundance\",\n          \"scope_distribution_management\",\n          \"scope_abundance_management\"\n        )) |\n        tidyselect::all_of(cols_addon)\n    )\n  #\n  knitr::kable(\n    x = data_table_wide,\n    format = \"html\",\n    escape = FALSE,\n    col.names = colnames(data_table_wide) |>\n      gsub(pattern = \"scope_\", replacement = \"\", x = _) |>\n      gsub(pattern = \"_\", replacement = \" \", x = _) |>\n      stringr::str_wrap(width = nchar(\"abundance\")), #|> \n      #gsub(pattern = \"\\\\n\", replacement = \"\\\\\\\\n\", x = _),\n    table.attr = 'data-quarto-disable-processing=\"true\"' # if quarto HERE\n  ) |>\n    # background of id and addon cols\n    kableExtra::column_spec(\n      column = \n        c(seq_along(cols_id), seq_along(cols_addon) + length(cols_id) + 6),\n      background = \"grey97\"\n    ) |>\n    # borders of scope cols\n    kableExtra::column_spec(\n      column = c(length(cols_id) + 1:6),\n      border_right = \"2px solid #f7f7f7\"\n    ) |>\n    kableExtra::kable_styling(\n      bootstrap_options = c(\"condensed\", \"hover\"), # \"responsive\"\n      full_width = FALSE,\n      position = \"left\",\n      font_size = 11\n    ) |>\n    kableExtra::collapse_rows(\n      columns = seq_along(cols_id),\n      valign = \"top\"\n    ) |>\n    kableExtra::add_header_above(\n      header = c(\n        \" \" = length(cols_id),\n        \"scope\" = grepl(\"scope\", colnames(data_table_wide)) |> sum(),\n        \" \" = length(cols_addon)\n      ),\n      extra_css = \"border-bottom: 1.5px solid\"\n    ) |>\n    kableExtra::row_spec(\n      row = 0 ,\n      # align headers top \n      extra_css = 'vertical-align: top !important; padding: 8px;'\n    ) |>\n    kableExtra::row_spec(\n      row = 1:nrow(data_table_wide),\n      # row height\n      extra_css = 'padding: 4px;'\n    ) |>\n    kableExtra::footnote(\n      symbol = footnote_data$scope_motivation,\n      symbol_manual = footnote_data$scope_verbose,\n      escape = FALSE\n    ) \n}\n\n```\n\n\n## Approach\n\n### Potential surveillance/monitoring schemes for IAS\n\nFollowing the EU IAS regulation, the IAS of (future) union concern can in theory be subjected to surveillance/monitoring schemes of different scopes.\nWe distinguish 6 surveillance/monitoring scopes:\n\n- Detection\n- Inventory\n- (Change in) Distribution\n- (Change in) Abundance\n- (Change in) Distribution after management\n- (Change in) Abundance after management\n\nWe employ the following working definitions:\n\n\n::: {.callout-note icon=\"false\"}\n## Detection\n\n- *Purpose*:\n    - Early identification of new invasive species in Flanders\n    - Maximize chance of detection (through probability of presence and probability of detection)\n    - Enable rapid responses\n- *Methods*:\n    - *high sensitivity* required relative to costs; this can also be high sensitivity accumulated over repeated measurements if costs are very low\n    - *high specificity* not required as false positives less problematic than false negatives; some procedure of confirmation of initial detections needs to be in place though\n    - provide at least presence/absence information\n    - e.g., eDNA, remote sensing methods\n- *Spatial and temporal coverage/resolution*:\n    - focused surveillance area at/around known/potential places of introduction and sites of sporadic occurrence; possibly also in/around conservation area\n    - complemented by broad (scale of Flanders?) \"surveillance\" via opportunistic observations?\n    - near-continuous measurement in space and time; this can but need not be achieved through high spatial/temporal frequency sampling: methods with low costs and/or sampling effort (e.g., remote sensing) can be used with dense sampling schemes; methods that have lower specificity in time and space (e.g., eDNA) could substitute for near-continuous sampling\n\n:::\n\n::: {.callout-note icon=\"false\"}\n## Inventory\nDefinition here.\n:::\n\n::: {.callout-note icon=\"false\"}\n## (Change in) Distribution\nDefinition here.\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## (Change in) Abundance\nDefinition here.\n:::\n\n::: {.callout-note icon=\"false\"}\n## (Change in) Distribution after management\nDefinition here.\n:::\n\n::: {.callout-note icon=\"false\"}\n## (Change in) Abundance after management\nDefinition here.\n:::\n\n\nCombining the IAS of union concern (here species A - N for purposes of illustration) with all surveillance/monitoring scopes results in a table of *potential combinations* of the form:\n\n\n```{r show-empty-table}\n#| results: asis\n#| classes: .center-table\n#| \ntable_base_illu_list_upd$stadium |> \n  dplyr::mutate(\n    scope_verbose = NA_character_\n  )|>\n  dplyr::arrange(species) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\"),\n    cols_addon = NULL,\n    footnote = NULL) |> \n  unclass() |> cat()\n\n\n```\n\n### Limiting the number of species-scheme combinations\n\nOur aim is to fill this table - with a limited number of *relevant and/or feasible* and *high priority* species-surveillance/monitoring scheme combinations.\nHence we want to obtain sparse variants of the above table as a first component of the plan of action. \nThis will then give rise to a concrete suggestion for the steering committee (e.g., ~3 species groups for which we will start designing the respective surveillance/monitoring schemes using the INBO-guidelines). \n\nTo arrive at such a table variant, the *following steps* are proposed.\nWe thereby mainly rely on the information gathered via the expert survey on IAS in Flanders.\nComplementing the expert judgements with additional information will probably be required occasionally.\n\n- **Step 1**: **Indicate cells that will definitively not be covered**, because...\n    - ... a *scope is irrelevant* for a species (e.g., detection is the only relevant scope for absent species, detection in conservation areas is only needed if a species is absent from the conservation area, if a species is not managed then monitoring after management is not needed)\n    - ... there is *no method available* to implement a scope (e.g., if available methods can only measure presence/absence of a species, but not numbers, abundance cannot be monitored)\n- **Step 2**:  **Obtain a ‘base’ table**\n    - Fill the remaining cells with the *reported methods* and *existing surveillance/monitoring schemes*\n- **Step 3**: **Indicate cells that have higher vs. lower priority**\n    - e.g., species that reach a *critical urgency and feasibility* value can be given priority\n- **Step 4**: **Look for synergies based on method-overlap within scopes**\n    - Between *prior* species, as well as between *prior and non-prior* species\n\nIn the following, we detail these steps and provide a schematic illustration of how the initially presented table will change.\n\n\n### Details and demonstration of approach\n\n```{r make-base-table-illustration}\n#| cache: false\n\ntable_base_illu_list_display <- mapply(\n  \\(table, index) {\n    table |> \n      dplyr::arrange(stadium, species) |>\n      make_table_display(\n        data_table = _,\n        cols_id = c(\"species\", \"stadium\"),\n        cols_addon = NULL,\n        footnote_data = footnote_base[1:index,] |>\n          # color last row of footnote data\n          dplyr::mutate(\n            dplyr::across(\n              tidyselect::starts_with(\"scope\"),\n              \\(y) dplyr::case_when(\n                dplyr::row_number() == dplyr::n() ~ kableExtra::cell_spec(x = y, color = color_hl),\n                TRUE ~ y\n              )\n            )\n          )\n      )\n  },\n  table_base_illu_list_upd,\n  table_base_illu_list_upd |> seq_along(),\n  SIMPLIFY = FALSE\n)\n\n```\n\n\n#### Step 1: Indicate cells that will definitively not be covered\n\nIn Step 1, we mark cells that are *definitively not covered*. \nOne reason for a cell not being covered is that the respective *scope is irrelevant* for a species. \nWe determine scope relevance based on ... \n\n- the invasion stadium of a species, \n- whether the surveillance/monitoring area is known, \n- whether the species is managed,\n- which information is necessary to evaluate management.\n\nAnother reason for a cell not being covered is that there are no suitable methods available to implement the scope.\n\nWe explain and illustrate each component of Step 1 in the following.\nFor the exact filtering rules applied to the survey data see [here](https://github.com/inbo/mias-general/blob/b5c6d5bdccdb77f97c0c42874f5524f57d856ebc/source/export/survey_experts/08_make_priority_tables.R#L226-L292).\n\n##### Invasion stadium\n\nFirst and foremost, scope relevance depends on *invasion stadium*.\nDepending on the invasion stadium (in conservation areas) only certain scopes make sense:\n\n- For **absent species**, the (potential) scope is detection (ideally) at / around places of introduction\n- For **sporadically present species** the (potential) scope is detection (ideally) at / around places of introduction and known sites  \n- For **limited established species**, the (potential) scopes are\n    - inventory,\n    - (change in) distribution (after management) at / around places of distribution and/or management,\n    - (change in) abundance (after management) at places of distribution and/or management\n- For **widely established species**, the (potential) scopes are\n    - detection in conservation areas if the species is not yet present/established there and is expected to have an impact,\n    - (change in) distribution (after management) at and around places of distribution and/or management,\n    - (change in) abundance (after management) at places of distribution and/or management;\n    - inventory is not considered as the distribution of widely established species is generally known (see survey results so far)\n\nHaving considered the invasion stadium the table looks like this:\n\n\n```{r show-base-table-illustration-stadium}\n#| results: asis\n#| classes: .center-table\n\n# https://github.com/quarto-dev/quarto-cli/issues/1710\ntable_base_illu_list_display$stadium |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Surveillance/monitoring area being (un-)known\n\nSecond, scope relevance also depends on whether the *surveillance/monitoring area is known* for a species. \nAt this stage, we only consider *limited established species* here. \n\n- If the **distribution area is reported as known**, then the scope inventory is irrelevant.\n- If the **distribution area is unknown**, inventory is relevant, and we also keep the distribution and abundance-related scopes for now and reconsider them later (see step 3)\n\nHaving considered whether the surveillance/monitoring area is known the table looks like this:\n\n```{r show-base-table-illustration-area}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_display$area |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Existence of management\n\nA third factor to determine scope relevance is the *existence of management*.\n\n- If a **species is not managed**, then management-related monitoring is irrelevant.\n\nHaving considered which species are managed the table looks like this:\n\n```{r show-base-table-illustration-managementexists}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_display$management_exists |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Evaluation of management\n\nFourth, scope relevance depends on the *kind of information necessary to evaluate management* (if the species is managed).\n\n- If **presence-absence information is sufficient**, then management-related monitoring using abundance information is irrelevant\n- If **abundance information is required**, then management-related monitoring using distribution information is irrelevant\n\nHaving considered the evaluation of management the table looks like this:\n\n```{r show-base-table-illustration-managementeval}\n#| results: asis\n#| classes: .center-table\n\n\ntable_base_illu_list_display$management_eval |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Suitable methods\n\nWhile a scope might remain relevant for a species after considering the above-discussed components, \na cell might still not being covered because there are no *suitable methods* available to implement the scope.\nAt this stage, we consider a method not suitable, if it *cannot measure the desired outcome*:\n\n- If a method reported in the survey can **only measure presence-absence** but not relative/absolute abundance of a species,\nthe scopes related to abundance become infeasible\n\nHaving considered the suitability of methods the table looks like this:\n\n\n```{r show-base-table-illustration-5}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_display$method |> unclass() |> cat()\n\n```\n\n#### Step 2: Obtain a ‘base’ table\n\nTo obtain a ‘base’ table in Step 2, we can now fill the remaining cells with the *reported surveillance/monitoring methods*.\nIn addition, we can provide *existing surveillance/monitoring schemes* (potentially) meeting the respective surveillance/monitoring scope (not illustrated here).\n\nThe base table looks like this:\n\n```{r show-base-table-illustration-6}\n#| results: asis\n#| classes: .center-table\n\ntable_base_illu_list_upd |> \n  dplyr::last() |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      scope_boolean == 1 ~ method_all,\n      TRUE ~ scope_verbose\n    ),\n    # don't highlight symbol\n    scope_verbose = gsub(\n      color_hl |> grDevices::col2rgb() |> as.vector() |> append(255) |> \n        paste(x = _, collapse = \", \"), \n      \"black\" |> grDevices::col2rgb() |> as.vector() |> append(255) |> \n        paste(x = _, collapse = \", \"), \n      scope_verbose)\n  ) |>\n  dplyr::arrange(stadium, species) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"stadium\"),\n    cols_addon = NULL,\n    footnote_data = footnote_base\n  ) |> \n  unclass() |> cat()\n\n```\n\n\n#### Step 3: Indicate cells with higher vs. lower priority\n\n\n```{r make-filtered-table-illustration}\n#| cache: false\n\ntable_filtered_illu_list_display <- mapply(\n  \\(table, index) {\n    table |>\n      dplyr::arrange(stadium, species) |>\n      make_table_display(\n        data_table = _,\n        cols_id = c(\"species\", \"stadium\"),\n        cols_addon = NULL,\n        footnote_data = footnote_filtered[1:index,] |>\n          # color last row of footnote\n          dplyr::mutate(\n            dplyr::across(\n              tidyselect::starts_with(\"scope\"),\n              \\(y) dplyr::case_when(\n                dplyr::row_number() == dplyr::n() ~ kableExtra::cell_spec(x = y, color = color_hl),\n                TRUE ~ y\n              )\n            )\n          )\n      )\n  },\n  table_filtered_illu_list_upd,\n  table_filtered_illu_list_upd |> seq_along(),\n  SIMPLIFY = FALSE\n)\n\n```\n\n\nIn Step 3, we further filter the base table (i.e., distinguish cells with high vs. low priority). \nTo filter, we currently propose to use the following criteria:\n\n- whether or not existing surveillance/monitoring schemes or opportunistic/unstructured observations cover the relevant/feasible scopes\n- whether or not the surveillance/monitoring area is known for a species\n- whether the expert-judged global feasibility and urgency reaches a critical value\n\nWe again explain and illustrate each component of Step 3 in the following.\nFor the exact filtering rules applied to the survey data see [here](https://github.com/inbo/mias-general/blob/b5c6d5bdccdb77f97c0c42874f5524f57d856ebc/source/export/survey_experts/08_make_priority_tables.R#L293-L340).\n\n\n\n##### Existing surveillance/monitoring schemes and opportunistic observations\n\nFirst, we check whether species-scope combinations can be considered covered by *existing surveillance/monitoring schemes* or *opportunistic/unstructured observations* (i.e., waarnemingen.be).\n\n- Cells for which **existing surveillance schemes meet the respective scope** are marked as having low priority (not yet implemented)\n- Cells associated with species for which **opportunistic observations are considered representative** are marked as having low priority\n\nHaving considered the representativeness of opportunistic observations the table looks like this:\n\n```{r show-filtered-table-illustration-observation}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$observation |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Surveillance/monitoring area being (un-)known\n\nSecond, we (again) take into account whether the *surveillance/monitoring area is known* for a species. \nIf the area is reported as unknown the following cells are marked as having low priority.\n\n- For **absent species** the detection scope is marked as having low priority if the introduction places are reported as unknown\n- For **sporadically present species** the detection scope is marked as having low priority if the introduction places or the distribution area are reported as unknown\n- For **limited established species**, if the distribution area is reported as unknown, \n    - the distribution- and abundance-related scopes are marked as low priority (conditional on inventory), \n    - while the inventory scope is marked as high priority\n\nHaving considered whether the surveillance/monitoring area is known the table looks like this:\n\n\n```{r show-filtered-table-illustration-area}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$area |> unclass() |> cat()\n\n```\n\n<br>\n\n##### Global priority score\n\nFinally, we consider the survey’s global priority scores reflecting the *expert-judged global feasibility and urgency per species*. \nFor now we calculate these scores as the grand mean across all scored questions per species, which means that each question gets the same weight.\n\n- One (or even multiple) critical value(s) can be defined in an absolute or relative (percentile) manner. \n    - Currently, the median is employed as as a critical value(s) \n- Cells associated with species that *do not reach the critical value* are marked as having low priority\n\nHaving considered the global prirority score the table looks like this:\n\n\n```{r show-filtered-table-illustration-globalscore}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_list_display$globalscore |> unclass() |> cat()\n\n```\n\n\n#### Step 4: Look for synergies\n\nFinally we aim to *group species based on synergies*. \nFor now we consider synergies in *designing* different surveillance/monitoring schemes (e.g., researching methods, planning sampling independent of the concrete sampling sites). We do at this stage not consider synergies that might purely arise during the implementation of the surveillance/monitoring scheme (e.g., overlap in concrete sampling sites). \nWe expect the design-synergies to mainly be driven by method overlap between species within scopes. \n\nSynergies can occur... \n\n- ... between prior species resulting in groups with multiple prior species,\n- ... between prior and non-prior species. In this case we...\n    - ... indicate non-prior species that are potential ‘free riders’ under surveillance/monitoring schemes for prior species.\n    - One priority species per group can thereby be sufficient.\n\n\nStarting from the filtered table...\n\n```{r show-filtered-table-illustration-final}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_final <- table_filtered_illu_list_upd |> \n  dplyr::last() |>\n  dplyr::mutate(\n    # don't highlight symbol\n    scope_verbose = gsub(\n      color_hl |> grDevices::col2rgb() |> as.vector() |> append(255) |> \n        paste(x = _, collapse = \", \"), \n      \"black\" |> grDevices::col2rgb() |> as.vector() |> append(255) |> \n        paste(x = _, collapse = \", \"), \n      scope_verbose)\n  ) |>\n  dplyr::arrange(stadium, species) \ntable_filtered_illu_final |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"stadium\"),\n    cols_addon = NULL,\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n\n... we have highlighted method-synergies within the scope distribution.\n\n```{r show-synergies}\n#| results: asis\n#| classes: .center-table\n\ntable_filtered_illu_final |>\n  dplyr::mutate(\n    scope_verbose = dplyr::case_when(\n      grepl(\"distribution$\", scope_type) & grepl(\"high\", scope_prior) & grepl(\"methode A\", method_all) ~ \n        kableExtra::cell_spec(x = method_all, color = color_meth_a, bold = TRUE),\n      grepl(\"distribution$\", scope_type) & grepl(\"high\", scope_prior) & grepl(\"methode B\", method_all) ~ \n        kableExtra::cell_spec(x = method_all, color = color_meth_b, bold = TRUE),\n      TRUE ~ scope_verbose\n    )\n  ) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"stadium\"),\n    cols_addon = NULL,\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n\n\n## Base tables\n\n```{r sort-base-table}\n\ntable_base_upd <- table_base_upd |>\n  dplyr::arrange(\n    scope_boolean |> dplyr::desc(), \n    scope_type, \n    prius_milieu,\n    stadium,\n    m_score |> dplyr::desc()\n  ) \n\n``` \n\nThe following base tables for plants and animals are sorted as follows:\n\n- First, rows are sorted by scope type relying on the order: `r table_base_upd$scope_type |> levels()`.\n    - That is, all species for which (at least) detection is relevant/feasible come first, \nfollowed by those for which (at least) inventory is relevant/feasible, \nfollowed by those for which (at least) inventory is relevant/feasible etc., resulting in a stair step (?)/ blocked pattern.\n- Within (i.e., for each value of) scope type, rows are sorted by milieu according to the order: `r table_base_upd$prius_milieu |> levels()`.\n- Within (i.e., for each value of) milieu, rows are sorted by invasion stadium, from \"absent\" to \"widely established\".\n- Within (i.e., for each value of) invasion stadium, rows are sorted by priority score from high to low.\n\n\n### Plants\n\n```{r make-base-table-display-plants}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_base_upd |>\n  dplyr::filter(grepl(\"plant\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"vern_name_nld\", \"prius_milieu\", \"stadium\"),\n    cols_addon = c(\"m_score\"),\n    footnote_data = footnote_base\n  ) |> unclass() |> cat()\n\n```\n\n### Animals\n\n```{r make-base-table-display-animals}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_base_upd |>\n  dplyr::filter(grepl(\"dier\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"vern_name_nld\", \"prius_milieu\", \"stadium\"),\n    cols_addon = c(\"m_score\"),\n    footnote_data = footnote_base\n  ) |> unclass() |> cat()\n\n```\n\n\n## Filtered tables\n\n\n```{r sort-filtered-table}\n\ntable_filtered_upd <- table_filtered_upd |>\n  dplyr::arrange(\n    scope_prior, \n    scope_type, \n    prius_milieu,\n    stadium,\n    m_score |> dplyr::desc()\n  ) \n\n``` \n\nThe following filtered tables for plants and animals are sorted similarly to the base tables:\n\n- First, rows are sorted by scope priority, with high priority scopes on top.\n- Within (i.e., for each value of) scope priority, rows are sorted by scope type relying again on the order: `r table_base_upd$scope_type |> levels()`.\n    - That is, within the high priority scopes, all species for which (at least) detection is relevant/feasible come first, \nfollowed by those for which (at least) inventory is relevant/feasible, \nfollowed by those for which (at least) inventory is relevant/feasible etc..\n- Within (i.e., for each value of) scope type, rows are again sorted by milieu according to the above order: `r table_base_upd$prius_milieu |> levels()`.\n- Within (i.e., for each value of) milieu, rows are again sorted by invasion stadium, from \"absent\" to \"widely established\".\n- Within (i.e., for each value of) invasion stadium, rows are again sorted by priority score from high to low.\n\n\n\n### Plants\n\n```{r make-filtered-table-display-plants}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_filtered_upd |>\n  dplyr::filter(grepl(\"plant\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"vern_name_nld\", \"prius_milieu\", \"stadium\"),\n    cols_addon = c(\"m_score\"),\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n### Animals\n\n```{r make-filtered-table-display-animals}\n#| results: asis\n#| cache: false\n#| classes: .center-table\n\ntable_filtered_upd |>\n  dplyr::filter(grepl(\"dier\", kingdom)) |>\n  make_table_display(\n    data_table = _,\n    cols_id = c(\"species\", \"vern_name_nld\", \"prius_milieu\", \"stadium\"),\n    cols_addon = c(\"m_score\"),\n    footnote_data = footnote_filtered\n  ) |> unclass() |> cat()\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"number-sections":true,"output-file":"test.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","title":"Plan of action","author":"Janne Adolf, Diederik Strubbe, Tim Adriaens, Thierry Onkelinx","toc-location":"left","toc-expand":true,"theme":"yeti","number-depth":3},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}